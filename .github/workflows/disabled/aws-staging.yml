name: aws-staging

env:
  ARTIFACT_LOCAL_PATH: /tmp/staging.tar.gz
  ARTIFACT_BUCKET_PATH: s3://synmetrix-exchange-bucket/staging.tar.gz
  PROJECT_ROOT_PATH: /project
  PROJECT_DIR: app
  PRIMARY_DOMAIN: synmetrix.org

# on:
#   push:
#     branches:
#       - aws-staging
#       - feature/aws-staging

jobs:
  repo-sync:
    runs-on: ubuntu-latest
    container: amazon/aws-cli:2.0.7
    steps:
      - name: Install TAR
        run: |
          yum install -y tar gzip

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Project
        uses: actions/checkout@v2

      - name: Make Tar of the repo and upload
        run: |
          mkdir ../build
          cp -TR . ../build
          tar -czvf $ARTIFACT_LOCAL_PATH ../build/   

          [ -z '${{ secrets.AWS_ACCESS_KEY_ID }}' ] && echo '[ERROR] AWS_ACCESS_KEY_ID is empty'
          [ -z '${{ secrets.AWS_SECRET_ACCESS_KEY }}' ] && echo '[ERROR] AWS_SECRET_ACCESS_KEY is empty'

          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws s3 cp $ARTIFACT_LOCAL_PATH $ARTIFACT_BUCKET_PATH

  deploy:
    needs: repo-sync
    runs-on: ubuntu-latest
    container: python:3.9-buster

    strategy:
      matrix:
        nodes:
          - node: ubuntu@i-012f145979d4ef7b8
            name: master0
            region: us-east-1
    steps:
      - name: Install environment
        run: |
          echo "==> Installing AWS-CLI"

          echo "AWS-CLI Authorizing..."
          mkdir -p ~/.aws/

          echo "awscli" >> ./requirements.txt
          echo "ec2instanceconnectcli" >> ./requirements.txt
          echo "envsubst" >> ./requirements.txt
          pip3 install -r requirements.txt

          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          which mssh

          echo "[SUCCESS] aws-cli configured"

      - name: Prepare deployment script
        run: |
          cat >./deploy_repo <<'EOL'

          echo "Authorizing..."
          source ~/.profile

          mkdir -p ~/.aws/

          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          aws s3 cp $ARTIFACT_BUCKET_PATH $ARTIFACT_LOCAL_PATH

          test -e $ARTIFACT_LOCAL_PATH || exit

          # reset project dir
          sudo rm -rf $PROJECT_ROOT_PATH/$PROJECT_DIR
          mkdir -p $PROJECT_ROOT_PATH/$PROJECT_DIR

          cd $PROJECT_ROOT_PATH
          # extract archive to the project dir
          tar xf $ARTIFACT_LOCAL_PATH -C $PROJECT_DIR --strip-components 1

          cd $PROJECT_DIR

          echo "Updating..."

          export NODE_NAME=${{ matrix.nodes.name }}

          export DOMAIN=$PRIMARY_DOMAIN 
          export REGISTRY_HOST=127.0.0.1:50001

          export SECRETS_HASURA_GRAPHQL_ADMIN_SECRET=${{ secrets.HASURA_GRAPHQL_ADMIN_SECRET }}

          export SECRETS_PG_HOST=${{ secrets.PG_HOST }}
          export SECRETS_PG_USER=${{ secrets.PG_USER }}
          export SECRETS_PG_PASS=${{ secrets.PG_PASS }}
          export SECRETS_PG_DB=${{ secrets.PG_DB }}

          export SECRETS_AWS_S3_ACCESS_KEY_ID=${{secrets.AWS_ACCESS_KEY_ID}}
          export SECRETS_AWS_S3_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}}
          export SECRETS_AWS_S3_BUCKET_NAME=${{secrets.AWS_S3_BUCKET_NAME}}

          export SECRETS_SMTP_HOST=${{ secrets.SMTP_HOST }}
          export SECRETS_SMTP_PORT=${{ secrets.SMTP_PORT }}
          export SECRETS_SMTP_SECURE=${{ secrets.SMTP_SECURE }}
          export SECRETS_SMTP_USER=${{ secrets.SMTP_USER }}
          export SECRETS_SMTP_PASS=${{ secrets.SMTP_PASS }}
          export SECRETS_SMTP_SENDER=${{ secrets.SMTP_SENDER }}
          
          export SECRETS_BASIC_ADMIN_AUTH=${{ secrets.BASIC_ADMIN_AUTH }}
          export SECRETS_LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}

          export PROTOCOL=https
          export WS_PROTOCOL=wss

          bash -i ./scripts/create-overlay-network.sh
          bash -i ./scripts/run-registry.sh

          # build images and push
          export ENV=stage
          export ANONYMOUS_ID=AWS_STAGING

          python3 cli.py services push

          # up the stack
          python3 cli.py services up synmetrix
          EOL

      - name: Prepare migration script
        run: |
          cat >./deploy_migrate <<'EOL'
            echo "Migration..."
            cd $PROJECT_ROOT_PATH/$PROJECT_DIR

            export HASURA_GRAPHQL_ADMIN_SECRET=${{ secrets.HASURA_GRAPHQL_ADMIN_SECRET }}
            export ANONYMOUS_ID=AWS_STAGING

            bash -i migrate.sh
          EOL

      - name: Run Deployment
        run: |
          envsubst < ./deploy_repo > ./deploy_repo_exec
          mssh ${{ matrix.nodes.node }} -oStrictHostKeyChecking=no -r ${{ matrix.nodes.region }} 'bash -s' < ./deploy_repo_exec

      - name: Run DB migration
        run: |
          envsubst < ./deploy_migrate > ./deploy_migrate_exec
          mssh ${{ matrix.nodes.node }} -oStrictHostKeyChecking=no -r ${{ matrix.nodes.region }} 'bash -s' < ./deploy_migrate_exec
